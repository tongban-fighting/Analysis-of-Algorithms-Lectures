//rude solution

class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> res;
        int k, num;

        for(int i = 0; i <= n; i++){
            k = i;
            num = 0;
            while(k){
                if(k & 1 == 1)
                    num++;
                k = k >> 1;
            }

            res.push_back(num);
        }

        return res;
    }
};

//with Brian Kernighan algorithm
class Solution {
public:
    int count(int n){
        int res = 0;
        while(n){
            n = n & (n-1);
            res++;
        }
        return res;
    }

    vector<int> countBits(int n) {
        vector<int> res;
        for(int i = 0; i <= n; i++)
            res.push_back(count(i));
        
        return res;
    }
};

//dynamic planning
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> res(n+1);
        int highBit = 0;

        for(int i = 1; i <= n; i++){
            if((i & (i-1)) == 0)
                highBit = i;
            res[i] = res[i-highBit] + 1;
        }
            
        return res;
    }
};
